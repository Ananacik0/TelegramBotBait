// import usersArr from './users.mjs';
require( 'dotenv' ).config( {path: './.env'} );
const TelegramBotApi = require( 'node-telegram-bot-api' );
const bot = new TelegramBotApi( process.env.TOKEN, {polling: true} );

// const mysql = require('mysql2')

// const connection = mysql.createConnection({
//   host: 'localhost',
//   user: 'root',
//   database: 'usersdb',
//   password: 'parol2002',
// })



let usersAll = [1042168079]
bot.setMyCommands([
  {command: '/start', description: '–ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º'},
  {command: '/help', description: '–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'},
  {command: '/menu', description: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é'},
]);

const CHANNELS = [
  {title: '–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞', link: 'https://t.me/+IWY5ZuNyoBc5YjUy', channelId: '-1002021967175'},
  {title: 'IT/–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', link: 'https://t.me/+zyegDTSgUoxjNjQy', channelId: '-1002229164310'},
  {title: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', link: 'https://t.me/thatgirl_vibes', channelId: '-1002386104491'},
  {title: 'WB/–ê—Ä—Ç–∏–∫—É–ª—ã', link: 'https://t.me/WBMonsters222', channelId: '-1002399255827'},
  {title: 'PR/–†–µ–∫–ª–∞–º–∞', link: 'https://t.me/+RD-HZmZ1zuJjNGVi', channelId: '-1002457816117'},
];

const srchPerson = {
  name: 'name',
  lastName: 'lastName',
  surName: 'surName',
  city: 'city'
};

const checkSrch = (chatId) => {
  bot.sendMessage(chatId, `<b><i>–ò–¥–µ—Ç –ø–æ–∏—Å–∫...</i></b>`, { parse_mode: "HTML" })
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>10%</i></b>`, { parse_mode: "HTML" }), 1000);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>20%</i></b>`, { parse_mode: "HTML" }), 1500);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>28%</i></b>`, { parse_mode: "HTML" }), 1900);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>32%</i></b>`, { parse_mode: "HTML" }), 2100);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>46%</i></b>`, { parse_mode: "HTML" }), 2400);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>67%</i></b>`, { parse_mode: "HTML" }), 3100);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>89%</i></b>`, { parse_mode: "HTML" }), 3500);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>94%</i></b>`, { parse_mode: "HTML" }), 3900);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>98%</i></b>`, { parse_mode: "HTML" }), 4100);
  setTimeout(() => bot.sendMessage(chatId, `–ü—Ä–æ—Ü–µ—Å—Å: <b><i>100%</i></b>`, { parse_mode: "HTML" }), 4500);
  setTimeout(() => bot.sendMessage(chatId, channelCheck(chatId)), 5000)
}

const captionCity = `‚ò∫Ô∏è‚ò∫Ô∏è‚ò∫Ô∏è–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, üí•m—ã –Ω–∞—à–ª–∏ <b>SLIV</b>—ã üí¶üí¶üí¶ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞üí•. –ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –Ω–∞—à–∏—Ö ‚ù§Ô∏è<b><i>–°–ø–æ–Ω—Å–æ—Ä–æ–≤</i></b>‚ù§Ô∏è –∑–∞ —Ç–æ, —á—Ç–æ –æ–Ω–∏ –¥–∞—é—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <s>–ø–ª–∞—Ç–Ω–æ</s> <b>–ë–ï–°–ü–õ–ê–¢–ù–û</b>‚úÖ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö –Ω–∞—à–µ–≥–æ <i>–ò–ù–¢–ï–†–ù–ï–¢–ê</i>üçÜ.
    –ë–µ–∑ –Ω–∏—Ö –º—ã –±—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ.
    <i><b>–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞</b></i> ‚≠êÔ∏è–ü–û–î–ü–ò–°–ê–¢–¨–°–Ø‚≠êÔ∏è –Ω–∞ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å <i>SLIV</i>–∞–º–∏üî•üî•üî•`;

const captionPerson = `‚ò∫Ô∏è‚ò∫Ô∏è‚ò∫Ô∏è–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, üí•m—ã –Ω–∞—à–ª–∏ —Ç–æ–≥–æ,üí¶üí¶üí¶ –∫–æ–≥–æ —Ç—ã –∏—Å–∫–∞–ªüí•. –ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –Ω–∞—à–∏—Ö ‚ù§Ô∏è<b><i>–°–ø–æ–Ω—Å–æ—Ä–æ–≤</i></b>‚ù§Ô∏è –∑–∞ —Ç–æ, —á—Ç–æ –æ–Ω–∏ –¥–∞—é—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <s>–ø–ª–∞—Ç–Ω–æ</s> <b>–ë–ï–°–ü–õ–ê–¢–ù–û</b>‚úÖ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö –Ω–∞—à–µ–≥–æ <i>–ò–ù–¢–ï–†–ù–ï–¢–ê</i>üçÜ.
    –ë–µ–∑ –Ω–∏—Ö –º—ã –±—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ.
    <i><b>–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞</b></i> ‚≠êÔ∏è–ü–û–î–ü–ò–°–ê–¢–¨–°–Ø‚≠êÔ∏è –Ω–∞ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <i>SLIV</i>üî•üî•üî•`

const channelCheck = async (chatId) => {
  return bot.sendPhoto(chatId, "https://media.newyorker.com/photos/64629d9ca8c7816949e96e85/master/w_2240,c_limit/Dillon-Blur-11.jpg", {
    caption: captionPerson, 
    reply_markup: {
      inline_keyboard: [
        [{text: CHANNELS[0].title, url: CHANNELS[0].link}, {text: CHANNELS[1].title, url: CHANNELS[1].link}],
        [{text: CHANNELS[2].title, url: CHANNELS[2].link}, {text: CHANNELS[3].title, url: CHANNELS[3].link}],
        [{text: CHANNELS[4].title, url: CHANNELS[4].link}],
        [{text: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'examination'}],
      ]
    }, resize_keyboard: true, parse_mode: "HTML"
  })
} 

const checkSubChannel = async (fromId, channels) => {
  const data = await bot.getChatMember(channels[1].channelId, fromId)
  if(data.status === 'left' || data.status === 'kicked') {
    return false
  } else {
    return true
  }
}

const srchInCity = async (chatId) => {
  return bot.sendPhoto(chatId, "https://media.newyorker.com/photos/64629d9ca8c7816949e96e85/master/w_2240,c_limit/Dillon-Blur-11.jpg", {
    caption: captionCity, 
    reply_markup: {
      inline_keyboard: [
        [{text: CHANNELS[0].title, url: CHANNELS[0].link}, {text: CHANNELS[1].title, url: CHANNELS[1].link}],
        [{text: CHANNELS[2].title, url: CHANNELS[2].link}, {text: CHANNELS[3].title, url: CHANNELS[3].link}],
        [{text: CHANNELS[4].title, url: CHANNELS[4].link}],
        [{text: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'examination'}],
      ]
    }, resize_keyboard: true, parse_mode: "HTML"
  })
}

const start = () => {
  bot.on( 'message', async msg => {
    
    const msgText = msg.text;
    const chatId = msg.chat.id;
    const userName = msg.from.first_name;
    const userId = msg.from.id;
    const msgId = msg.message_id;
    const isAdmin = Number( process.env.ADMINID ) === userId;

    const userInArray = (user) => {
      return user === userId
    }

    switch(true) {

      case msgText === '/start':
        if(usersAll.length > 0) {
          const findUser = usersAll.find(userInArray)
          if(findUser === undefined) {
            usersAll.push(userId)
            console.log(usersAll)
          } else {
            console.log('—É–∂–µ –µ—Å—Ç—å')
            console.log(usersAll)
          }
          console.log(usersAll)
        }
        console.log(userId, userName)
        return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${userName}.`, {
        reply_markup: {
          keyboard: [
            ['‚≠êÔ∏è –®–æ—É–±–∏–∑/Slivki ‚≠êÔ∏è', 'üåá –¢–≤–æ–π –≥–æ—Ä–æ–¥/GayGirl üåá'],
            ['üïµüèΩ‚Äç‚ôÇÔ∏è –ó–∞–ø—Ä–æ—Å/YourFriends üïµüèΩ‚Äç‚ôÇÔ∏è'],
            ['‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå'],
          ], resize_keyboard: true
        }
       });

      case msgText === '/help':
        return bot.sendMessage(chatId, `${userName}, –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.`, {
          reply_markup: {
            keyboard: [
              ['btn1', 'btn2'],
              ['btn3'],
              ['‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå'],
            ], resize_keyboard: true
          }
        });
      
      case msgText === '/menu':
        return bot.sendMessage(chatId, '–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ', {
          reply_markup: {
            keyboard: [
              ['‚≠êÔ∏è –®–æ—É–±–∏–∑/Slivki ‚≠êÔ∏è', 'üåá –¢–≤–æ–π –≥–æ—Ä–æ–¥/GayGirl üåá'],
              ['üïµüèΩ‚Äç‚ôÇÔ∏è –ó–∞–ø—Ä–æ—Å/YourFriends üïµüèΩ‚Äç‚ôÇÔ∏è'],
              ['‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå'],
            ], resize_keyboard: true
          }
        });

      case msgText == '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå':
        return bot.sendMessage(chatId, '–í—ã –∑–∞–∫—Ä—ã–ª–∏ –º–µ–Ω—é', {
          reply_markup: {
            keyboard: [
              ['‚¨ÜÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚¨ÜÔ∏è'],
            ], resize_keyboard: true
          }
        });
      
      case msgText == '‚¨ÜÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚¨ÜÔ∏è':
        return bot.sendMessage(chatId, '–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ', {
          reply_markup: {
            keyboard: [
              ['‚≠êÔ∏è –®–æ—É–±–∏–∑/Slivki ‚≠êÔ∏è', 'üåá –¢–≤–æ–π –≥–æ—Ä–æ–¥/GayGirl üåá'],
              ['üïµüèΩ‚Äç‚ôÇÔ∏è –ó–∞–ø—Ä–æ—Å/YourFriends üïµüèΩ‚Äç‚ôÇÔ∏è'],
              ['‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå'],
            ], resize_keyboard: true
          }
        });

      case msgText == '‚≠êÔ∏è –®–æ—É–±–∏–∑/Slivki ‚≠êÔ∏è':
        console.log(userId, userName)
        return bot.sendMessage(chatId, `–¢—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ SLIV –∑–≤–µ–∑–¥—ã?
          –ù–∞–∂–º–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å SLIV —Å–≤–æ–µ–≥–æ –∫—É–º–∏—Ä–∞)`, {
            reply_markup: {
              inline_keyboard: [
                [{text: '–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å SLIV`–æ–º', callback_data: 'srchStar'}],
              ]
            }
          });

      case msgText == 'üåá –¢–≤–æ–π –≥–æ—Ä–æ–¥/GayGirl üåá':
        console.log(userId, userName)
        return bot.sendMessage(chatId, '–ù–∞–π–¥–∏ SLIV –∏–∑ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞!', {
          reply_markup: {
            inline_keyboard: [
              [{text: '–ú–æ—Å–∫–≤–∞', callback_data: 'srchCity'}, {text: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', callback_data: 'srchCity'}],
              [{text: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', callback_data: 'srchCity'}, {text: '–†—è–∑–∞–Ω—å', callback_data: 'srchCity'}],
              [{text: '–ö–∞–∑–∞–Ω—å', callback_data: 'srchCity'}, {text: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', callback_data: 'srchCity'}],
              [{text: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', callback_data: 'srchCity'}, {text: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', callback_data: 'srchCity'}],
              [{text: '–í–æ—Ä–æ–Ω–µ–∂', callback_data: 'srchCity'}, {text: '–°–∞—Ä–∞—Ç–æ–≤', callback_data: 'srchCity'}],
              [{text: '–ò—Ä–∫—É—Ç—Å–∫', callback_data: 'srchCity'}, {text: '–ë–µ–ª–≥–æ—Ä–æ–¥', callback_data: 'srchCity'}],
              [{text: '–í–æ–ª–≥–æ–≥—Ä–∞–¥', callback_data: 'srchCity'}, {text: '–ò–∂–µ–≤—Å–∫', callback_data: 'srchCity'}],
              [{text: '–ü—Å–∫–æ–≤', callback_data: 'srchCity'}, {text: '–°–∞–º–∞—Ä–∞', callback_data: 'srchCity'}],
              [{text: '–ë–∞—Ä–Ω–∞—É–ª', callback_data: 'srchCity'}, {text: '–°–æ—á–∏', callback_data: 'srchCity'}],
              [{text: '–°—É—Ä–≥—É—Ç', callback_data: 'srchCity'}, {text: '–¢–∞–º–±–æ–≤', callback_data: 'srchCity'}],
              [{text: '–õ–∏–ø–µ—Ü–∫', callback_data: 'srchCity'}, {text: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', callback_data: 'srchCity'}],
              [{text: '–¢–≤–µ—Ä—å', callback_data: 'srchCity'}, {text: '–í–ª–∞–¥–∏–º–∏—Ä', callback_data: 'srchCity'}],
              [{text: '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü', callback_data: 'srchCity'}, {text: '–ß–µ–±–æ–∫—Å–∞—Ä—ã', callback_data: 'srchCity'}],
              [{text: '–ü–µ—Ä–º—å', callback_data: 'srchCity'}, {text: '–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫', callback_data: 'srchCity'}],
              [{text: '–£—Ñ–∞', callback_data: 'srchCity'}, {text: '–ß–µ–ª—è–±–∏–Ω—Å–∫', callback_data: 'srchCity'}],
              [{text: '–ö—É—Ä–≥–∞–Ω', callback_data: 'srchCity'}, {text: '–¢–∞–≥–∞–Ω—Ä–æ–≥', callback_data: 'srchCity'}],
              [{text: '–û—Ä–µ–Ω–±—É—Ä–≥', callback_data: 'srchCity'}, {text: '–û–º—Å–∫', callback_data: 'srchCity'}],
            ]
          }
        });
      
      case msgText == 'üïµüèΩ‚Äç‚ôÇÔ∏è –ó–∞–ø—Ä–æ—Å/YourFriends üïµüèΩ‚Äç‚ôÇÔ∏è':
        console.log(userId, userName)
        await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ <b><i>–ò–º—è: –ò–≤–∞–Ω</i></b>`, {
            parse_mode: 'HTML',
          });
        break;

      case msgText === 'checkUsersInBot':
        bot.sendMessage(chatId, usersAll.indexOf())
        break
        
      case msgText.includes('–ò–º—è:'): 
        const srchName = msgText.replace('–ò–º—è: ', '')
        const srchPersonName = Object.assign({}, srchPerson)
        srchPersonName.name = srchName;
        Object.assign(srchPerson, srchPersonName)
        await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ <b><i>–§–∞–º–∏–ª–∏—è: –ò–≤–∞–Ω–æ–≤</i></b>`, {
          parse_mode: 'HTML'
        });
        break
        
      case msgText.includes('–§–∞–º–∏–ª–∏—è:'): 
        const srchLastName = msgText.replace('–§–∞–º–∏–ª–∏—è: ', '')
        const srchPersonLastName = Object.assign({}, srchPerson)
        srchPersonLastName.lastName = srchLastName
        Object.assign(srchPerson, srchPersonLastName)
        await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ <b><i>–û—Ç—á–µ—Å—Ç–≤–æ: –ò–≤–∞–Ω–æ–≤–∏—á</i></b>`, {
          parse_mode: 'HTML'
        });
        break
        
      case msgText.includes('–û—Ç—á–µ—Å—Ç–≤–æ:'):
        const srchSurName = msgText.replace('–û—Ç—á–µ—Å—Ç–≤–æ: ', '')
        const srchPersonSurName = Object.assign({}, srchPerson)
        srchPersonSurName.surName = srchSurName
        Object.assign(srchPerson, srchPersonSurName)
        await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ <b><i>–ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞</i></b>`, { parse_mode: "HTML" })
        break

      case msgText.includes('–ì–æ—Ä–æ–¥:'):
        const srchCity = msgText.replace('–ì–æ—Ä–æ–¥: ', '')
        const srchPersonCity = Object.assign({}, srchPerson)
        srchPersonCity.city = srchCity
        Object.assign(srchPerson, srchPersonCity)
        if(srchPerson.name === 'name' && srchPerson.lastName === 'lastName' && srchPerson.surName === 'surName' && srchPerson.city === 'city') {
          await bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        } else {
          await bot.sendMessage(chatId, `–í—ã –∏—â–µ—Ç–µ "<b><i>${srchPerson.name}</i></b> <b><i>${srchPerson.lastName}</i></b> <b><i>${srchPerson.surName}</i></b>" –∏–∑ –≥–æ—Ä–æ–¥–∞ <b><i>${srchPerson.city}</i></b>`, {
            parse_mode: "HTML"
          })
          checkSrch(chatId);
        }
        break
    
      // case msgText.includes('Name:'):
      //   checkSrch(chatId)
    };
  });

  bot.on( 'callback_query', async cback => {
    const cData = cback.data;
    const cChatId = cback.message.chat.id;
    const cUserId = cback.from.id;
    const cMsgId = cback.message.message_id;
    
    switch(true) {
      
      case cData === 'srchStar':
        bot.sendMessage(cChatId, `–ü–æ–ª—É—á–∏ 
        —Ç–æ—Ç —Å–∞–º—ã–π <b><i>Sliv</i></b> <b><i>–ó–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π</i></b>`, { parse_mode: "HTML" })
        channelCheck(cChatId)
        break
      case cData === 'examination':
        await bot.sendMessage(cChatId, `<b><i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...</i></b>`, { parse_mode: "HTML" })
        const userSub = await checkSubChannel(cUserId, CHANNELS)
        if(!userSub) {
          return bot.sendMessage(cChatId, '–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã :)')
        } else {
          return bot.sendMessage(cChatId, `–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. ‚ù§Ô∏è–°–ø–∞—Å–∏–±–æ‚ù§Ô∏è
            –í—ã–≥—Ä—É–∑–∫–∞ <b><i>SLIVa</i></b> –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ <i>24 —á–∞—Å–∞</i> –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.`, { parse_mode: "HTML" })
        };

      case cData === 'srchCity':
        srchInCity(cChatId)
      break
    }
  })
};

start();